diff --git a/lib/Reflex/Collection.pm b/lib/Reflex/Collection.pm
index 7d099e1..a33b325 100644
--- a/lib/Reflex/Collection.pm
+++ b/lib/Reflex/Collection.pm
@@ -7,7 +7,7 @@ use Moose;
 use Moose::Exporter;
 use Reflex::Callbacks qw(cb_method);
 use Carp qw(cluck);
-
+use Scalar::Util qw(weaken);
 extends 'Reflex::Base';
 
 Moose::Exporter->setup_import_methods( with_caller => [ qw( has_many ) ]);
@@ -18,9 +18,18 @@ has objects => (
        default => sub { {} },
 );
 
+has _owner => (
+       is     => 'ro',
+       isa    => 'Object',
+       writer => '_set_owner',
+);
+
 sub remember {
        my ($self, $object) = @_;
+
        $self->watch($object, stopped => cb_method($self, "cb_forget"));
+       $self->_owner->watch($object, result => cb_method($self->_owner, "on_result"));
+
        $self->objects()->{$object} = $object;
 }
 
@@ -45,7 +54,13 @@ sub has_many {
        $etc{is}      = 'ro';
        $etc{isa}     = 'Reflex::Collection';
        $etc{lazy}    = 1 unless exists $etc{lazy};
-       $etc{default} = sub { Reflex::Collection->new() };
+       $etc{default} = sub {
+               my $self = shift;
+               my $collection = Reflex::Collection->new();
+               weaken $self;
+               $collection->_set_owner($self);
+               return $collection; 
+       };
 
        $meta->add_attribute($name, %etc);
 }
diff --git a/lib/Reflex/Role/Collectible.pm b/lib/Reflex/Role/Collectible.pm
index 8bf3523..620e6ea 100644
--- a/lib/Reflex/Role/Collectible.pm
+++ b/lib/Reflex/Role/Collectible.pm
@@ -10,6 +10,11 @@ sub stopped {
        $self->emit( event => "stopped", args => {} );
 }
 
+sub result {
+       my ($self, $args) = @_;
+       $self->emit( event => "result", args => $args );
+}
+





}
	package TestCollectible;
	use Moose;
	with 'Reflex::Role::Collectible';
	extends 'Reflex::Base';

	has id => (
		is  => 'rw',
		isa => 'Int',
	);

	sub do_stuff {
		my $self = shift;
	
		for (1..10) {
			$self->result({
				value => $_,
			});
		}
	
		$self->stopped();
	}
}



{
	package TestCollection;
	use Moose;
	use Reflex::Collection;
	use TestCollectible;
	extends 'Reflex::Base';

	has_many foos => (
		handles   => { remember_foo => "remember" },
	);

	sub BUILD {
		my ($self, $args) = @_;

		for (1..10) {
			my $foo = TestCollectible->new(id => $_);
			$self->remember_foo(
				$foo
			);
			$foo->do_stuff();
		}
	}

	sub on_result {
		my ($self, $args) = @_;

		my $foo      = $args->{_sender};
		my $value    = $args->{value};
		my $foo_type = ref $foo;
		say sprintf 'got a result of %s! id => %s, value => %s', $foo_type, $foo->id, $value;
	}
}

my $tc = TestCollection->new();
Reflex->run_all();

exit;