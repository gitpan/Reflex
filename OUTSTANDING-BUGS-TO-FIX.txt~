------------- BATMAN -------------------

Use of uninitialized value in list assignment at Reflex/Role/Reactive.pm line 486 during global destruction.
 at Reflex/Role/Reactive.pm line 486
        Reflex::Role::Reactive::_shutdown('Reflex::POE::Wheel::Run=HASH(0x101f0668)') called at Reflex/Role/Reactive.pm line 502
        Reflex::Role::Reactive::DEMOLISH('Reflex::POE::Wheel::Run=HASH(0x101f0668)', 1) called at Moose/Object.pm line 78
        Moose::Object::DEMOLISHALL('Reflex::POE::Wheel::Run=HASH(0x101f0668)', 1) called at Moose/Object.pm line 89
        Moose::Object::__ANON__() called at Try/Tiny.pm line 47
        eval {...} called at Try/Tiny.pm line 39
        Try::Tiny::try('CODE(0x10206588)', 'CODE(0xd3111c8)') called at Moose/Object.pm line 96
        Moose::Object::DESTROY('Reflex::POE::Wheel::Run=HASH(0x101f0668)') called at bin/myapp line 0
        eval {...} called at bin/myapp line 0

----------------- AGORMAN TEST CASE -----------------

{
	package Runner;
	use Moose;
	extends 'Reflex::Base';
	use Reflex::POE::Wheel::Run;
	use Reflex::Callbacks qw(cb_role);

	has wheel => (
		isa => 'Reflex::POE::Wheel::Run|Undef',
		is  => 'rw',
	);

	has end => (
		isa => 'Int',
		is  => 'ro',
	);

	sub BUILD {
		my $self = shift;

		$self->wheel(
			Reflex::POE::Wheel::Run->new(
				Program => "$^X -wle 'print qq[pid(\$\$) moo(\$_)] for 1..".$self->end."; exit'",
				cb_role($self, "child"),
			)
		);
	}

	sub on_child_stdin {
		print "stdin flushed\n";
	}

	sub on_child_stdout {
		my ($self, $args) = @_;
		print "stdout: $args->{output}\n";
	}

	sub on_child_stderr {
		my ($self, $args) = @_;
		print "stderr: $args->{output}\n";
	}

	sub on_child_error {
		my ($self, $args) = @_;
		return if $args->{operation} eq "read";
		print "$args->{operation} error $args->{errnum}: $args->{errstr}\n";
	}

	sub on_child_close {
		my ($self, $args) = @_;
		print "child closed all output\n";
	}

	sub on_child_signal {
		my ($self, $args) = @_;
		print "child $args->{pid} exited: $args->{exit}\n";
		$self->wheel(undef);
	}
}

# Main.

my $runner = Runner->new(end => 1);
my $runner2 = Runner->new(end => 100000);
Reflex->run_all();
exit;

---Output---

...
stdout: pid(27457) moo(14647)
stdout: pid(27457) moo(14648)
stdout: pid(27457) moo(14649)
stdout: pid(27457) moo(14650)
stdout: pid(27457) moo(14651)
stdout: pid(27457) moo(14652)
stdout: pid(27457) moo(14653)
stdout: pid(27457) moo(14654)
child 27456 exited: 0
child 27456 exited: 0
27447: !!! Child process PID:27457 reaped: 
27447: !!! Your program may not be using sig_child() to reap processes.
27447: !!! In extreme cases, your program can force a system reboot
27447: !!! if this resource leakage is not corrected.
